#pragma once

// Additional definitions in C++ land. The interrupts.hpp header must be compatible
// with C to be included in the autogenerated C code that calls ours C++ interrupts.

// This file controls the data flow between the interrupts and the main application.

#include "type_definitions.hpp"



uint32_t get_adc_update_number();
FullReadout get_readout();


// Data queue
// ----------

void readout_history_reset();
bool readout_history_full();
bool readout_history_available();
Readout readout_history_pop();

// Motor control
// -------------

// Check if motor is slowing/stopped (breaking or freewheeling).
bool is_motor_stopped();

// Functions to set motor driver state.
void set_motor_state(MotorOutputs const & outputs, DriverState state);

// Shorthand for motor break.
static inline void set_motor_break(){
    return set_motor_state(null_motor_outputs, DriverState::OFF);
} 

// Additional motor control parameters.

// Set the leading angle for smooth driving.
void set_leading_angle(int16_t angle);

// Set the PWM target for the motor drive.
void set_pwm_target(uint16_t pwm);

// Position tracking
// -----------------

// Position calibration data. These are the trigger angles for each hall sensor output.
extern PositionCalibration position_calibration;

// Current calibration factors.
extern CurrentCalibration current_calibration;

// PID control parameters.
extern PIDParameters pid_parameters;