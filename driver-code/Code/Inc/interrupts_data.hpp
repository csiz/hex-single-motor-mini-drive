#pragma once

// Additional definitions in C++ land. The interrupts.hpp header must be compatible
// with C to be included in the autogenerated C code that calls ours C++ interrupts.

// This file controls the data flow between the interrupts and the main application.

#include "type_definitions.hpp"

// Latest Data
// -----------

// Get a copy of the latest readout data.
FullReadout get_readout();


// Data queue
// ----------

// Reset the history buffer indexes.
void readout_history_reset();
// Check if the readout history is full.
bool readout_history_full();
// Check if there's data to read.
bool readout_history_available();
// Read the oldest data in the history buffer.
Readout readout_history_pop();


// Motor control
// -------------

// Check if the motor is in a safe state (breaking or freewheeling).
bool is_motor_safed();

// Set the motor command to be executed by the interrupt loop.
void set_motor_command(DriverState const& state, DriverParameters const& parameters);

// Set the motor angle directly, eg. from an external sensor.
void set_angle(int16_t angle);


// Position tracking
// -----------------

// Current calibration factors.
extern CurrentCalibration current_calibration;

// Interrupt loop control parameters.
extern ControlParameters control_parameters;